C
C   FILE: expcid.F
C   Purpose: CI files for WESMOM
C
#ifdef old_notes
/* Comdeck notes */
(1) is the accumulated SIGN in EXPCIV not wrong? : Yes, it was never
    used, since we have not been reordering orbitals. It has been corrected
    95-07-01, Jeppe
c950701-jo : modified readin from LUSTRI due to change in DETINF
#endif
#  /* Deck expcid */
      SUBROUTINE EXPCID(CII,CIE,ISMI,ISME,
     &                  LUSTRI,XNDXCI,IWRK,LWORK,NTEST)
C
C a CI-vector CII is given in some space ,I, expand
C this vector to current RAS/CAS space,E .
C The number of inactive electrons is assumed constant
c as is the total MS value.
C
C Driver routine
C
#include "implicit.h"
      DIMENSION CII(*),CIE(*)
      DIMENSION XNDXCI(*),IWRK(LWORK)
C
#include "detbas.h"
#include "ciinfo.h"
#include "mxpdim.h"
#include "strnum.h"
#include "inforb.h"
C
C
C Jeppe Olsen November 1988
C
C SPACE FOR REORDERING OF ORBITALS
C
      KLREOB = 1
      KLFREE = KLREOB + NASHT
      LWORKG = LWORK  - NASHT
      CALL ISTVC2(IWRK(KLREOB),0,1,NASHT)
C
C     950518-hjaaj: define ICOOS for WES_EXPCIV for expanded graph.
C     (was done already in GETCIS in earlier version)
C
      CALL CIOFF(ISME,1,XNDXCI,NTEST)
C     CALL CIOFF(IREFSM,ICORHC,XNDXCI,NTEST)
C
      CALL EXPCI(XNDXCI(KIASTR),XNDXCI(KIBSTR),XNDXCI(KSTASA),
     &           XNDXCI(KSTASB),XNDXCI(KSTBAA),XNDXCI(KSTBAB),
     &           XNDXCI(KNSSOA),XNDXCI(KNSSOB),XNDXCI(KCOFF),
     &           XNDXCI(KICOOS),XNDXCI(KIOCOC),NASTR,NBSTR,
     &           NAEL,NBEL,MAXSYM,MULD2H,NOCTPA,NOCTPB,
     &           LUSTRI,IWRK(KLFREE),
     &           EQUAL,IWRK(KLREOB),ISMI,ISME,CII,CIE,
     &           XNDXCI(KTPFSA),XNDXCI(KTPFSB),LWORKG,
     &           NDTASM,NASHT,XNDXCI(KISSOA),XNDXCI(KISSOB),NTEST)
C
      RETURN
      END
#  /* Deck expci */
      SUBROUTINE EXPCI(IASTR,IBSTR,NSTASA,NSTASB,ISTBAA,ISTBAB,NSSOA,
     &           NSSOB,ICS,ICOOS,IOCOC,NASTR,NBSTR,NAEL,NBEL,
     &           MAXSME,SYMPRO,NOCTPA,NOCTPB,LUSTRI,IWORK,
     &           EQUAL,IREOB,IRFSMI,IRFSME,CII,CIE,
     &           ITPFSA,ITPFSB,LWORK,NDTASM,NORB,ISSOA,ISSOB,NTEST)
C
#include "implicit.h"
      LOGICAL EQUAL,EQUALI
      DIMENSION IASTR(NAEL,NASTR),IBSTR(NBEL,NBSTR)
      DIMENSION NSTASA(MAXSME),NSTASB(MAXSME)
      DIMENSION ISTBAA(MAXSME),ISTBAB(MAXSME)
      DIMENSION NSSOA(MAXSME),NSSOB(MAXSME)
      DIMENSION ISSOA(*),ISSOB(*)
      DIMENSION ICS(MAXSME),ICOOS(NOCTPB,NOCTPA,MAXSME)
      DIMENSION IOCOC(NOCTPA,NOCTPB)
      DIMENSION ITPFSA(*),ITPFSB(*)
      INTEGER SYMPRO(8,8),NDTASM(MAXSME)
      DIMENSION IWORK(*)
C
      NDET = NDTASM(IRFSME)
C DIMENSION OF IWORK SHOULD AT LEAST BE ???
C
C 1 : READ IN INFORMATION ABOUT DIMENSIONS OF PREVIOUS RAS SPACE I
C     ( DONE AT THIS PLACE TO FOR DYNAMIC ALLOCATION )
      REWIND LUSTRI
      READ(LUSTRI)
      READ(LUSTRI) MMDET
C MAXIMAL NUMBER OF SYMMETRIES
      READ(LUSTRI) MXSMI,JTYP
c. added
      READ(LUSTRI)MAEL,MBEL
C NUMBER OF OCCUPATION TYPES FOR ALPHA STRINGS AND
C BETA STRINGS
      READ(LUSTRI) MOCTPA,MOCTPB
C
C TOTAL NUMBER OF ALPHA STRINGS AND BETA STRINGS
      READ(LUSTRI) MASTR,MBSTR
C
      IF (NTEST .GT. 0) THEN
         WRITE(6,'(//A//A,L10//A)')
     &   ' <<< output from EXPCI >>>',
     &   ' EQUAL =',EQUAL,
     &   'EXPCI information from LUSTRI:'
         WRITE(6,*) ' Number of dets    ',MMDET
         WRITE(6,*) ' MXSMI and JTYP    ',MXSMI,JTYP
         WRITE(6,*) ' MOCTPA and MOCTPB ',MOCTPA,MOCTPB
         WRITE(6,*) ' MASTR and MBSTR   ',MASTR,MBSTR
      END IF
C
C** 2 : MEMORY ALLOCATION ALLOWING INFORMATION ABOUT OLD
C       STRINGS TO BE READ IN , AND REGENERATION OF
C       NUMBERING INFORMATION ABOUT CURRENT SET OF STRINGS
C
C* 2.1 : FOR CURRENT STRINGS
      KLFREE = 1
      KLZA   = KLFREE
      KLFREE = KLFREE + NORB*NAEL
      IF( EQUAL ) THEN
        KLZB = KLZA
      ELSE
        KLZB = KLFREE
        KLFREE = KLFREE + NORB * NBEL
      END IF
C ORDERING OF E STRINGS
      MAXSTA = IBION(NORB,NAEL)
      MAXSTB = IBION(NORB,NBEL)
      MAXSTR = MAX(MAXSTA,MAXSTB)
      KLORDA = KLFREE
      KLFREE = KLORDA + MAXSTR
      IF( EQUAL ) THEN
        KLORDB = KLORDA
       ELSE
        KLORDB = KLFREE
        KLFREE = KLORDB + MAXSTR
       END IF
       KLORDS = KLFREE
       KLFREE = KLORDS + MAXSTR
C SYMMETRY OF STRINGS
       KISMSA = KLFREE
       KLFREE = KLFREE + NASTR
       IF( EQUAL ) THEN
         KISMSB = KISMSA
       ELSE
         KISMSB = KLFREE
         KLFREE = KLFREE + NBSTR
       END IF
C I NUMBERING TO E NUMBERING
       KIEA   = KLFREE
       KLFREE = KLFREE + MAXSTR
       KIESA  = KLFREE
       KLFREE = KLFREE + MAXSTR
C
       IF ( EQUAL ) THEN
         KIEB   = KIEA
         KIESB  = KIESA
       ELSE
         KIEB   = KLFREE
         KLFREE = KLFREE + MAXSTR
         KIESB  = KLFREE
         KLFREE = KLFREE + MAXSTR
       END IF
C. 2.2 :  ARRAYS FOR INFORMATION ABOUT I STRINGS
C
       KJASTR = KLFREE
       KLFREE = KJASTR + NAEL * MASTR
       IF ( EQUAL ) THEN
         KJBSTR = KJASTR
       ELSE
         KJBSTR = KLFREE
         KLFREE = KJBSTR + NBEL * MBSTR
       END IF
C
       KMSASA = KLFREE
       KLFREE = KMSASA + MXSMI
       IF ( EQUAL) THEN
         KMSASB = KMSASA
       ELSE
         KMSASB = KLFREE
         KLFREE = KMSASB + MXSMI
       END IF
C
       KJSBAA = KLFREE
       KLFREE = KJSBAA + MXSMI
       IF ( EQUAL ) THEN
        KJSBAB = KJSBAA
       ELSE
        KJSBAB = KLFREE
        KLFREE = KJSBAB + MXSMI
       END IF
C
       KJCS   = KLFREE
       KLFREE = KJCS + MXSMI
C
       KJCOOS = KLFREE
       KLFREE = KJCOOS + MXSMI*MOCTPA*MOCTPB
C
       KJOCOC = KLFREE
       KLFREE = KJOCOC + MOCTPA*MOCTPB
C
       IF( JTYP .EQ. 2 ) THEN
         KMSOSA = KLFREE
         KLFREE = KMSOSA + MOCTPA * MXSMI
         KJSOSA = KLFREE
         KLFREE = KLFREE + MOCTPA * MXSMI
         IF ( EQUAL) THEN
           KMSOSB = KMSOSA
           KJSOSB = KJSOSA
         ELSE
           KMSOSB = KLFREE
           KLFREE = KMSOSB + MOCTPB * MXSMI
           KJSOSB = KLFREE
           KLFREE = KLFREE + MOCTPB * MXSMI
         END IF
       END IF
C
C .. 3 : REGENERATE NUMBERING OF EXPANDED SET OF STRINGS
C
C
C.. SET UP HANDY MATRIX
      CALL WEIGHT(IWORK(KLZA),1,IWORK(KLFREE),NTEST)
      IF( .NOT. EQUAL ) CALL WEIGHT(IWORK(KLZB),2,IWORK(KLFREE),NTEST)
C.. HANDY NUMBER AS A FUNCTION OF ACTUAL NUMBER
      CALL ISTVC2(IWORK(KLORDA),0,1,MAXSTA)
      DO 100 IA = 1, NASTR
        IWORK(KLORDS-1+IA) =
     &  IZNUM(IASTR(1,IA),NAEL,IWORK(KLZA),NAEL,NORB,IWORK(KLORDA),
     &        NTEST )
  100 CONTINUE
C
      IF( NTEST .GE. 10 ) THEN
        WRITE(6,*) ' HANDY NUMBER FOR STRINGS '
        CALL IWRTMA(IWORK(KLORDS),1,NASTR,1,NASTR)
      END IF
C
C.. ACTUAL NUMBER AS A FUNCTION OF HANDY NUMBER
      CALL ISETVC(IWORK(KLORDA),0,MAXSTA)
      DO 110 IA = 1, NASTR
        IWORK(KLORDA-1+IWORK(KLORDS-1+IA) ) = IA
  110 CONTINUE
C
      IF( NTEST .GE. 10 ) THEN
        WRITE(6,*) ' ACTUAL NUMBER FOR EACH HANDY NUMBER '
        CALL IWRTMA(IWORK(KLORDA),1,MAXSTA,1,MAXSTA)
      END IF
C
C
      IF( .NOT. EQUAL ) THEN
C..  HANDY NUMBER AS A FUNCTION OF ACTUAL NUMBER
        CALL ISTVC2(IWORK(KLORDB),0,1,MAXSTB)
        DO 101 IB = 1, NBSTR
          IWORK(KLORDS-1+IB) =
     &    IZNUM(IBSTR(1,IB),NBEL,IWORK(KLZB),NBEL,NORB,IWORK(KLORDB),
     &          NTEST )
  101   CONTINUE
C
        IF( NTEST .GE. 10) THEN
          WRITE(6,*) ' HANDY NUMBER FOR STRINGS '
         CALL IWRTMA(IWORK(KLORDS),1,NBSTR,1,NBSTR)
        END IF
C
C.. ACTUAL NUMBER AS A FUNCTION OF HANDY NUMBER
        CALL ISETVC(IWORK(KLORDB),0,MAXSTR)
        DO 111 IB = 1, NBSTR
          IWORK(KLORDB-1+IWORK(KLORDS-1+IB) ) = IB
  111   CONTINUE
C
        IF( NTEST .GE. 10 ) THEN
          WRITE(6,*) ' ACTUAL NUMBER FOR EACH HANDY NUMBER '
          CALL IWRTMA(IWORK(KLORDB),1,MAXSTR,1,MAXSTR)
         END IF
      END IF
C SYMMETRY ARRAY FOR E STRINGS
      DO 200 ISM = 1,MAXSME
        IF(ISM.EQ.1)THEN
          IOFF = 1
        ELSE
           IOFF = IOFF + NSTASA(ISM-1)
        END IF
        CALL ISETVC(IWORK(KISMSA-1+IOFF),ISM,NSTASA(ISM) )
  200 CONTINUE
      IF(.NOT. EQUAL) THEN
        DO 201 ISM = 1,MAXSME
          IF(ISM.EQ.1)THEN
            IOFF = 1
          ELSE
            IOFF = IOFF + NSTASB(ISM-1)
          END IF
          CALL ISETVC(IWORK(KISMSB-1+IOFF),ISM,NSTASB(ISM) )
  201   CONTINUE
      END IF
C
C .. 4 : RETRIEVE INFORMATION ABOUT PREVIOS SET OF STRINGS
C
      READ(LUSTRI) ( IWORK(KMSASA-1+I),I=1,MXSMI)
      IF(.NOT.EQUAL)
     &READ(LUSTRI) ( IWORK(KMSASB-1+I),I=1,MXSMI)
      READ(LUSTRI) ( IWORK(KJSBAA-1+I),I=1,MXSMI)
      IF(.NOT.EQUAL)
     &READ(LUSTRI) ( IWORK(KJSBAB-1+I),I=1,MXSMI)
C
      READ(LUSTRI)( IWORK(KJASTR-1+I),I=1,NAEL*MASTR)
      IF(.NOT.EQUAL)
     &READ(LUSTRI)( IWORK(KJBSTR-1+I),I=1,NBEL*MBSTR)
C
      IF ( JTYP .EQ. 2 ) THEN
        READ(LUSTRI) (IWORK(KMSOSA-1+I),I=1,MXSMI*MOCTPA)
        READ(LUSTRI) (IWORK(KJSOSA-1+I),I=1,MXSMI*MOCTPA)
        IF( .NOT. EQUAL ) THEN
          READ(LUSTRI) (IWORK(KMSOSB-1+I),I=1,MXSMI*MOCTPB)
          READ(LUSTRI) (IWORK(KJSOSB-1+I),I=1,MXSMI*MOCTPB)
        END IF
      END IF
C
      READ(LUSTRI) (  IWORK(KJCS-1+I),I=1,MXSMI)
      READ(LUSTRI) (  IWORK(KJCOOS-1+I),I=1,MXSMI*MOCTPA*MOCTPB)
      READ(LUSTRI) (  IWORK(KJOCOC-1+I),I=1,MOCTPA*MOCTPB)
C
C .. 4 : EXPANDED NUMBER FOR STRING READ IN
C
C     SUBROUTINE EXPSTR(JSTR,MSTR,NEL,NORB,IHTOE,Z,IITOE,IITOES,NSTR,
C    &                  IWORK,IREORB,NTEST)
      CALL EXPSTR(IWORK(KJASTR),MASTR,NAEL,NORB,IWORK(KLORDA),
     &            IWORK(KLZA),IWORK(KIEA),IWORK(KIESA),NASTR,
     &            IWORK(KLFREE),IREOB,NTEST)

      IF( .NOT. EQUAL ) THEN
        CALL EXPSTR(IWORK(KJBSTR),MBSTR,NBEL,NORB,IWORK(KLORDB),
     &              IWORK(KLZB),IWORK(KIEB),IWORK(KIESB),NBSTR,
     &              IWORK(KLFREE),IREOB,NTEST)
      END IF
C
C .. 5 : EXPAND OLD CIVECTOR INTO NEW CI SPACE
C
      CALL WES_EXPCIV(NSTASA,NSTASB,ISTBAA,ISTBAB,
     &            IOCOC,ICS,ICOOS,NOCTPA,NOCTPB,
     &            NSSOA,ISSOA,NSSOB,ISSOB,
     &            IWORK(KMSASA),IWORK(KMSASB),IWORK(KJSBAA),
     &            IWORK(KJSBAB),JTYP,
     &            IWORK(KJOCOC),IWORK(KJCS),
     &            IWORK(KJCOOS),MOCTPA,MOCTPB,IWORK(KMSOSA),
     &            IWORK(KJSOSA),IWORK(KMSOSB),IWORK(KJSOSB),
     &            IWORK(KIEA),IWORK(KIESA),CII,CIE,
     &            1,MXSMI,MAXSME,SYMPRO,IWORK(KIEB),IWORK(KIESB),
     &            IRFSME,IRFSMI,NDET,ITPFSA,ITPFSB,
     &            IWORK(KISMSA),IWORK(KISMSB),NTEST)

C     SUBROUTINE WES_EXPCIV(NSTASA,NSTASB,ISTBAA,ISTBAB,
C    &                 IOCOC,ICS,ICOOS,NOCTPA,NOCTPB,
C    &                 NSTAOS,ISTAOS,NSTBOS,ISTBOS,
C    &                 MSTASA,MSTASB,JSTBAA,JSTBAB,JTYP,
C    &                 JOCOC,JCS,JCOOS,MOCTPA,MOCTPB,
C    &                 MSTAOS,JSTAOS,MSTBOS,JSTBOS,
C    &                 ITOEA,ITOESA,CII,CIE,IZERO,MXSMI,MXSME,SYMPRO,
C    &                 ITOEB,ITOESB,
C    &                 IREFSM,JREFSM,NDET,ITPSTA,ITPSTB,
C    &                 ISMASA,ISMASB,NTEST)
      RETURN
      END
#  /* Deck expstr */
      SUBROUTINE EXPSTR(JSTR,MSTR,NEL,NORB,IHTOE,Z,IITOE,IITOES,NSTR,
     &                  IWORK,IREORB,NTEST)
C
C TWO SETS OF STRINGS ARE GIVEN, AN EXPANDED BASIS AND AN
C INITIAL BASIS . OBTAIN NUMBER AND PHASE SHIFT  GOING
C FROM UNEXPANDED FORM TO EXPANDED FORM
C
C   INPUT :
C  ========
C
C EXPANDED STRINGS :
C     IHTOE : HANDY NUMBER TO ACTUAL STRING NUMBER
C     Z     : HANDY'S Z MATRIX FOR STRINGS
C
C INITIAL STRINGS
C    JSTR : OCCUPATION OF STRINGS
C    MSTR : NUMBER OF STRINGS
C    IREORB : REORDERING OF ORBITALS , GOING
C             FROM INITIAL TO EXPANDED BASIS
C    NSTR   : NUMBER OF EXPANDED STRINGS
C
C  OUTPUT :
C ==========
C
C    IITOE : IITOE(I) IS NUMBER FOR IN EXPANDED GRAPH FOR
C            INPUT STRING I
C    IITOES : SIGN ARRAY , FROM REORDERING OF ORBITALS
C
C
#include "implicit.h"
      DIMENSION JSTR(NEL,MSTR)
      DIMENSION IHTOE(NSTR)
      DIMENSION IREORB(NORB)
      DIMENSION IITOE(MSTR)
      DIMENSION IITOES(MSTR)
      INTEGER*4 Z(*)
C
      DIMENSION IWORK(NEL)
C
      DO 100 JA = 1, MSTR
C
C REORDERED OLD STRING
        DO 90 IEL = 1, NEL
          IWORK(IEL) = IREORB(JSTR(IEL,JA) )
   90   CONTINUE
C
C CHANGE TO ASCENDING ORDER
C            ORDSTR(IINST,IOUTST,NELMNT,ISIGN )
        CALL ORDSTR(IWORK,IWORK,NEL,ISIGN )
C
C ADRESS OF THIS STRING IN EXPANDED BASIS
C                    IZNUM(IOCC,NEL,Z,MAXEL,MAXORB,NEWORD,NTEST)
         IENUM= IZNUM(IWORK,NEL,Z,NEL,NORB,IHTOE,NTEST)
         IF( IENUM .LE. 0 ) THEN
C THIS STATEMENT IS DEVOTED THE MEMORY OF PETER TAYLOR'S VISIT TO LUND
           WRITE(6,*)
     &     '  KNUCKLEHEAD : STRING NOT FOUND IN EXPANDED GRAPH '
         ELSE
           IITOE(JA) = IENUM
           IITOES(JA) = ISIGN
         END IF
C
  100 CONTINUE
C
      IF ( NTEST .GE. 20 ) THEN
        WRITE(6,*) ' PLACE OF INPUT STRINGS IN EXPANDED GRAPH '
        CALL IWRTMA(IITOE,1,MSTR,1,MSTR)
        WRITE(6,*) ' SIGN ARRAY '
        CALL IWRTMA(IITOES,1,MSTR,1,MSTR)
      END IF
C
      RETURN
      END
#  /* Deck WES_expciv */
      SUBROUTINE WES_EXPCIV(NSTASA,NSTASB,ISTBAA,ISTBAB,
     &                 IOCOC,ICS,ICOOS,NOCTPA,NOCTPB,
     &                 NSTAOS,ISTAOS,NSTBOS,ISTBOS,
     &                 MSTASA,MSTASB,JSTBAA,JSTBAB,JTYP,
     &                 JOCOC,JCS,JCOOS,MOCTPA,MOCTPB,
     &                 MSTAOS,JSTAOS,MSTBOS,JSTBOS,
     &                 ITOEA,ITOESA,CII,CIE,IZERO,MXSMI,MXSME,SYMPRO,
     &                 ITOEB,ITOESB,
     &                 IREFSM,JREFSM,NDET,ITPSTA,ITPSTB,
     &                 ISMASA,ISMASB,NTEST)
C
C A CI EXPANSION IS GIVEN IN A RAS SPACE I
C OBTAIN THE SAME VECTOR SPACE IN AN EXPANDED RASSPACE
C
#include "implicit.h"
      DIMENSION NSTASA(MXSME),NSTASB(MXSME)
      DIMENSION ISTBAA(MXSME),ISTBAB(MXSME)
      DIMENSION IOCOC(NOCTPA,NOCTPB)
      DIMENSION ICS(MXSME),ICOOS(NOCTPB,NOCTPA,MXSME)
      DIMENSION NSTAOS(NOCTPA,MXSME),NSTBOS(NOCTPB,MXSME)
      DIMENSION ISTAOS(NOCTPA,MXSME),ISTBOS(NOCTPB,MXSME)
      DIMENSION ISMASA(*),ISMASB(*)
      DIMENSION ITPSTA(*),ITPSTB(*)
C
      DIMENSION MSTASA(MXSMI),MSTASB(MXSMI)
      DIMENSION JSTBAA(MXSMI),JSTBAB(MXSMI)
      DIMENSION JOCOC(MOCTPA,MOCTPB)
      DIMENSION JCS(MXSME),JCOOS(MOCTPB,MOCTPA,MXSMI)
      DIMENSION MSTAOS(MOCTPA,MXSMI),MSTBOS(MOCTPB,MXSMI)
      DIMENSION JSTAOS(MOCTPA,MXSMI),JSTBOS(MOCTPB,MXSMI)
C
      INTEGER SYMPRO(8,8)
      DIMENSION ITOEA(*),ITOESA(*)
      DIMENSION ITOEB(*),ITOESB(*)
      DIMENSION CII(*),CIE(*)
C
      IF( IZERO .NE. 0 ) THEN
       CALL SETVEC(CIE,0.0D0,NDET)
      END IF
C
        IF(JTYP .EQ. 1 ) THEN
          NATP = 1
          NBTP = 1
        ELSE
          NATP = MOCTPA
          NBTP = MOCTPB
        END IF
C
C LOOP OVER CII
      JDET = 0
      DO 1000 JASM = 1, MXSMI
        JBSM = SYMPRO(JASM,JREFSM)
        DO 900 JATP = 1, NATP
          IF( JTYP .EQ. 1 ) THEN
            NJA = MSTASA(JASM)
            JASTR = JSTBAA(JASM)
          ELSE
            NJA =   MSTAOS(JATP,JASM)
            JASTR = JSTAOS(JATP,JASM)
          END IF
          DO 800 JBTP = 1, NBTP
            IF( JTYP .EQ. 1 ) THEN
              NJB = MSTASB(JBSM)
              JBSTR = JSTBAB(JBSM)
            ELSE
              NJB =   MSTBOS(JBTP,JBSM)
              JBSTR = JSTBOS(JBTP,JBSM)
            END IF
C
            IF( JOCOC(JATP,JBTP) .NE. 1 ) GOTO 800
C
            DO 700 JB = JBSTR,JBSTR+NJB-1
C
              IB = ITOEB(JB)
              IBSM = ISMASB(IB)
              SIGN1 = ITOESB(JB)
              IBTP = ITPSTB(IB)
              IBSTR = ISTBOS(IBTP,IBSM)
              NIB =   NSTBOS(IBTP,IBSM)
              IBREL = IB - IBSTR + 1
C
              DO 600 JA = JASTR,JASTR+NJA-1
                JDET = JDET + 1
                IA = ITOEA(JA)
                IF(IA.EQ.0.OR.IB.EQ.0) GOTO 600
                SIGN = SIGN1 * ITOESA(JA)
                IATP = ITPSTA(IA)
                IF(IOCOC(IATP,IBTP) .NE. 1 ) GOTO 600
                IASM = ISMASA(IA)
                IASTR = ISTAOS(IATP,IASM)
                NIA = NSTAOS(IATP,IASM)
                IAREL = IA - IASTR + 1
C
C AND THEN THE NEW ADRESS
C
                IOFF = ICOOS(IBTP,IATP,IASM)
                IDET = IOFF - 1 + (IBREL-1)*NIA+IAREL
C
                CIE(IDET) = CII(JDET)*SIGN
  600         CONTINUE
  700       CONTINUE
  800     CONTINUE
  900   CONTINUE
 1000 CONTINUE
C
      IF ( NTEST .GE. 21 ) THEN
        WRITE(6,*) ' INPUT AND OUTPUT VECTORS FROM WES_EXPCIV : '
        CALL WRTMAT(CII,1,JDET,1,JDET,0)
        CALL WRTMAT(CIE,1,NDET,1,NDET,0)
      END IF
C
      RETURN
      END
