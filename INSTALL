

    Table of contents
    -----------------

 1. Configure or CMake
 2. Basic installation using the setup script
 3. Basic installation without the setup script
 4. Linking to external math libraries
 5. Running CMake using GUI
 6. Running tests
 7. Compiling in verbose mode
 8. Compiling on many cores
 9. Out of source compilation


 1. Configure or CMake
    ------------------

You have two methods to build the source code.

Either using the configure
script:
   $ ./configure
   $ [possibly edit Makefile.config]
   $ make

or using cmake:
   $ ./setup [--flags]
   $ cd build
   $ make

The configure script configures a prepared Makefile, whereas CMake creates a
new Makefile based on default parameters which can be modified.

Configuring using the configure script is the traditional method to build
Dalton. This method is well tested.

Building Dalton using CMake is a new and alternative method and since the
support for CMake has been only recently added, some problems may still appear.

The rest of this document discussed various CMake options and is irrelevant
if you build using configure.


 2. Basic installation using the setup script
    -----------------------------------------

The setup script is a useful front-end to CMake.
It does nothing else than creating the directory "build" and calling
CMake with appropriate environment variables and flags:
   $ ./setup [--flags]
   $ cd build
   $ make
Call setup without flags to see all available options:
   $ ./setup
You can see the CMake command using:
   $ ./setup [--flags] --show
and use it directly to call CMake without setup.

It is HIGHLY recommended to run the test set after you have compiled
Dalton (see 5. Running tests).


 3. Basic installation without the setup script
    -------------------------------------------

Quick start:
   $ mkdir build
   $ cd build
   $ cmake ..
   $ make

The setup script does nothing else than calling CMake with appropriate
environment variables and flags. The two following strategies are completely
equivalent:

Using CMake directly:
   $ mkdir build
   $ cd build
   $ FC=mpif90 CC=mpicc cmake -DENABLE_MPI=1 -DCMAKE_BUILD_TYPE=Release ..
   $ make

Using setup:
   $ ./setup --fc=mpif90 --cc=mpicc --mpi
   $ cd build
   $ make

There is nothing special about the directory "build".
You can do this instead:
   $ mkdir /buildpath
   $ cd /buildpath
   $ cmake /sourcepath
   $ make


 4. Linking to external math libraries
    ----------------------------------

Typically you will want to link to external math (BLAS and LAPACK) libraries,
for instance provided by MKL or Atlas.

The CMake configuration script will automatically find them if you define MATH_ROOT:
   $ export MATH_ROOT='/opt/intel/mkl' # do not use full path MATH_ROOT='/opt/intel/mkl/lib/ia32'
                                       # cmake will append the correct paths depending on the processor
                                       # and the default integer type
Then:
   $ ./setup [--flags]                 # do not need to define --math
   $ cd build
   $ make

Alternatively:
   $ cd build
   $ [FC=gfortran CC=gcc] MATH_ROOT='/opt/intel/mkl' cmake ..
   $ make


 5. Running CMake using GUI
    -----------------------

You prefer GUI? No problem. You can configure with GUI:
   $ cd build
   $ cmake ..
   $ cmake-gui ..
You may have to install cmake-gui for it, on debian/ubuntu:
   $ sudo apt-get install cmake cmake-gui


 6. Running tests
    -------------

You can run the test suite with:
   $ make test


 7. Compiling in verbose mode
    -------------------------

Sometimes you want to see the actual compiler flags and definitions:
   $ make VERBOSE=1


 8. Compiling on many cores
    -----------------------

Yes, it works. Try:
   $ make -j4


 9. Out of source compilation
    -------------------------

By default CMake builds out of source.
You can build several binaries with the same source:
   $ cd /sourcepath
   $ ./setup --fc=gfortran --cc=gcc --prefix=/gfortran-buildpath
   $ cd /gfortran-builddir
   $ make
   $ cd /sourcepath
   $ ./setup --fc=ifort --cc=icc --prefix=/ifort-buildpath
   $ cd /ifort-buildpath
   $ make
